import { NextRequest, NextResponse } from 'next/server'

const FIREWORKS_API_KEY = 'gdhFtHMfmQZgRPTmQnOk1heFBVZ6X6T2NNBYNE64o7c3uoz1'
const FIREWORKS_API_URL = 'https://api.fireworks.ai/inference/v1/chat/completions'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { courts, weather, userLocation, sportType } = body

    console.log('üìä Input data:', {
      courtsCount: courts?.length,
      weather: weather ? 'Available' : 'Not available',
      userLocation: userLocation ? 'Available' : 'Not available',
      sportType
    })

    if (!courts || !Array.isArray(courts) || courts.length === 0) {
      return NextResponse.json(
        { success: false, error: 'D·ªØ li·ªáu s√¢n kh√¥ng h·ª£p l·ªá' },
        { status: 400 }
      )
    }

    // Create a smart prompt for Fireworks AI
    const sportTypeVietnamese = getSportTypeInVietnamese(sportType)
    const weatherInfo = weather ? `Th·ªùi ti·∫øt hi·ªán t·∫°i: ${weather.temp}¬∞C, ${weather.condition}, ƒë·ªô ·∫©m ${weather.humidity}%` : 'Kh√¥ng c√≥ th√¥ng tin th·ªùi ti·∫øt'
    
    const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh chuy√™n v·ªÅ g·ª£i √Ω ƒë·∫∑t s√¢n th·ªÉ thao. D·ª±a tr√™n th√¥ng tin sau, h√£y ch·ªçn ra 3 s√¢n ${sportTypeVietnamese} t·ªët nh·∫•t v√† ƒë∆∞a ra l√Ω do cho m·ªói s√¢n (t·ªëi ƒëa 400 k√Ω t·ª± cho m·ªói l√Ω do).

Th√¥ng tin th·ªùi ti·∫øt: ${weatherInfo}

Danh s√°ch s√¢n ${sportTypeVietnamese} c√≥ s·∫µn:
${courts.map((court, index) => `
${index + 1}. ${court.name}
   - ƒê·ªãa ch·ªâ: ${court.address}
   - Gi√°: ${court.pricePerHour.toLocaleString('vi-VN')}ƒë/gi·ªù
   - ƒê√°nh gi√°: ${court.rating}‚≠ê (${court.reviewCount} ƒë√°nh gi√°)
   - Kho·∫£ng c√°ch: ${court.distance}km
   - Ti·ªán √≠ch: ${court.amenities ? court.amenities.join(', ') : 'Kh√¥ng c√≥'}
   - M√¥ t·∫£: ${court.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
`).join('')}

H√£y ph√¢n t√≠ch d·ª±a tr√™n c√°c ti√™u ch√≠:
1. Th·ªùi ti·∫øt (s√¢n trong nh√† t·ªët h∆°n khi m∆∞a, s√¢n ngo√†i tr·ªùi t·ªët khi n·∫Øng ƒë·∫πp)
2. ƒê√°nh gi√° v√† s·ªë l∆∞·ª£ng review
3. Gi√° c·∫£ h·ª£p l√Ω
4. Kho·∫£ng c√°ch g·∫ßn
5. Ti·ªán √≠ch v√† ch·∫•t l∆∞·ª£ng

Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo format JSON sau:
{
  "suggestions": [
    {
      "courtId": "id_c·ªßa_s√¢n",
      "rank": 1,
      "reason": "L√Ω do ch·ªçn s√¢n n√†y (t·ªëi ƒëa 400 k√Ω t·ª±)"
    },
    {
      "courtId": "id_c·ªßa_s√¢n", 
      "rank": 2,
      "reason": "L√Ω do ch·ªçn s√¢n n√†y (t·ªëi ƒëa 400 k√Ω t·ª±)"
    },
    {
      "courtId": "id_c·ªßa_s√¢n",
      "rank": 3, 
      "reason": "L√Ω do ch·ªçn s√¢n n√†y (t·ªëi ƒëa 400 k√Ω t·ª±)"
    }
  ]
}

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ text kh√°c.`

    
    // Prepare the request payload for Fireworks
    const fireworksPayload = {
      model: "accounts/fireworks/models/gpt-oss-20b",
      max_tokens: 4096,
      top_p: 1,
      top_k: 40,
      presence_penalty: 0,
      frequency_penalty: 0,
      temperature: 0.6,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    }
    
    // Call Fireworks AI API
    const response = await fetch(FIREWORKS_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${FIREWORKS_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(fireworksPayload)
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Fireworks API Error Response:')
      console.error('Status:', response.status)
      console.error('Status Text:', response.statusText)
      console.error('Error Body:', errorText)
      throw new Error(`Fireworks API error: ${response.status} ${response.statusText} - ${errorText}`)
    }

    const aiResponse = await response.json()
    const aiContent = aiResponse.choices[0]?.message?.content

    if (!aiContent) {
      console.error('‚ùå No content in AI response')
      console.error('Full AI response structure:', aiResponse)
      throw new Error('No content received from Fireworks AI')
    }

    // Parse the AI response
    let suggestions
    try {
      // Try to extract JSON from the response
      const jsonMatch = aiContent.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        suggestions = JSON.parse(jsonMatch[0])
      } else {
        console.error('‚ùå No JSON found in AI response')
        console.error('Full AI content:', aiContent)
        throw new Error('No JSON found in AI response')
      }
    } catch (parseError) {
      console.error('‚ùå Error parsing AI response:', parseError)
      
      // Don't use fallback - throw error instead
      throw new Error(`Failed to parse AI response: ${parseError instanceof Error ? parseError.message : 'Unknown parsing error'}`)
    }

    // Validate suggestions
    if (!suggestions.suggestions || !Array.isArray(suggestions.suggestions)) {
      console.error('‚ùå Invalid suggestions format:', suggestions)
      throw new Error('Invalid suggestions format from AI')
    }

    // Map suggestions to court data
    const mappedSuggestions = suggestions.suggestions.map((suggestion: any) => {
      const court = courts.find((c: any) => c._id === suggestion.courtId)
      if (!court) {
        console.error('‚ùå Court not found for ID:', suggestion.courtId)
        console.error('Available court IDs:', courts.map((c: any) => c._id))
        throw new Error(`Court not found: ${suggestion.courtId}`)
      }
      
      return {
        court,
        rank: suggestion.rank,
        reason: suggestion.reason.substring(0, 400) // Ensure max 400 characters
      }
    })

    console.log('üéâ AI Suggestions generated successfully:', mappedSuggestions.length, 'suggestions')
    console.log('Final suggestions:', mappedSuggestions.map((s: any) => ({
      courtName: s.court.name,
      rank: s.rank,
      reason: s.reason.substring(0, 100) + '...'
    })))

    return NextResponse.json({
      success: true,
      data: {
        suggestions: mappedSuggestions,
        weather,
        userLocation,
        sportType: sportTypeVietnamese
      },
      inputToFireworks: fireworksPayload,
      outputFromFireworks: aiResponse
    })

  } catch (error) {
    console.error('‚ùå Error generating AI suggestions:', error)
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace')
    return NextResponse.json(
      { 
        success: false, 
        error: 'L·ªói khi t·∫°o g·ª£i √Ω AI',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

function getSportTypeInVietnamese(type: string): string {
  const sportMap: { [key: string]: string } = {
    'football': 'B√≥ng ƒë√° mini',
    'badminton': 'C·∫ßu l√¥ng',
    'tennis': 'Tennis',
    'basketball': 'B√≥ng r·ªï',
    'volleyball': 'B√≥ng chuy·ªÅn',
    'pickleball': 'Pickleball'
  }
  return sportMap[type] || type
}
