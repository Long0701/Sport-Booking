#!/usr/bin/env node

require('dotenv').config()

async function testNewOwnerRegistrationFlow() {
  console.log('üß™ Testing New Owner Registration Flow...\n')

  const testEmail = 'testowner@example.com'
  const testData = {
    // Th√¥ng tin c√° nh√¢n
    name: 'Nguy·ªÖn VƒÉn Test',
    email: testEmail,
    password: 'testpass123',
    phone: '0901234567',
    // Th√¥ng tin doanh nghi·ªáp
    businessName: 'S√¢n Test Sport',
    businessAddress: '123 Test Street, Test City',
    businessPhone: '0901234568',
    businessEmail: 'business@test.com',
    description: 'S√¢n th·ªÉ thao test',
    experience: 'Nhi·ªÅu nƒÉm kinh nghi·ªám'
  }

  let registrationId = null

  try {
    // Test 1: Owner Registration (kh√¥ng c·∫ßn login)
    console.log('1Ô∏è‚É£ Testing owner registration (standalone)...')
    const regResponse = await fetch('http://localhost:3000/api/owner/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    })

    const regData = await regResponse.json()
    
    if (regData.success) {
      console.log('‚úÖ Registration successful!')
      console.log(`   Business: ${regData.data.registration.businessName}`)
      console.log(`   Status: ${regData.data.registration.status}`)
      console.log(`   Email: ${regData.data.registration.email}`)
      registrationId = regData.data.registration.id
    } else {
      console.log('‚ùå Registration failed:', regData.error)
      return
    }

    // Test 2: Check registration status
    console.log('\n2Ô∏è‚É£ Testing registration status check...')
    const statusResponse = await fetch(`http://localhost:3000/api/owner/register?email=${encodeURIComponent(testEmail)}`)
    const statusData = await statusResponse.json()
    
    if (statusData.success && statusData.data.hasRegistration) {
      console.log('‚úÖ Status check works!')
      console.log(`   Status: ${statusData.data.registration.status}`)
      console.log(`   Can Login: ${statusData.data.registration.canLogin}`)
    } else {
      console.log('‚ùå Status check failed')
    }

    // Test 3: Try login before approval (should fail)
    console.log('\n3Ô∏è‚É£ Testing login before approval (should fail)...')
    const loginBeforeResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: testEmail,
        password: testData.password
      })
    })

    const loginBeforeData = await loginBeforeResponse.json()
    
    if (loginBeforeData.success) {
      console.log('‚ùå Login should have failed before approval!')
    } else {
      console.log('‚úÖ Login correctly failed before approval')
      console.log(`   Error: ${loginBeforeData.error}`)
    }

    // Test 4: Admin approval flow
    console.log('\n4Ô∏è‚É£ Testing admin approval...')
    
    // Get admin token first
    const adminLoginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'admin@sportbooking.com',
        password: 'admin123456'
      })
    })

    const adminLoginData = await adminLoginResponse.json()
    if (!adminLoginData.success) {
      console.log('‚ùå Admin login failed:', adminLoginData.error)
      return
    }

    const adminToken = adminLoginData.token
    console.log('‚úÖ Admin logged in successfully')

    // Get registration requests
    const requestsResponse = await fetch('http://localhost:3000/api/admin/owner-registrations', {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    })

    const requestsData = await requestsResponse.json()
    if (requestsData.success) {
      console.log('‚úÖ Got registration requests')
      console.log(`   Pending requests: ${requestsData.data.stats.pending}`)
      
      // Find our test request
      const testRequest = requestsData.data.requests.find(r => r.user_email === testEmail)
      if (testRequest) {
        console.log('‚úÖ Found test request:', testRequest.id)
        
        // Approve the request
        const approveResponse = await fetch(`http://localhost:3000/api/admin/owner-registrations/${testRequest.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${adminToken}`
          },
          body: JSON.stringify({
            action: 'approve',
            admin_notes: 'Test approval'
          })
        })

        const approveData = await approveResponse.json()
        if (approveData.success) {
          console.log('‚úÖ Registration approved successfully!')
          console.log(`   Message: ${approveData.message}`)
        } else {
          console.log('‚ùå Approval failed:', approveData.error)
          return
        }
      } else {
        console.log('‚ùå Test request not found in admin list')
        return
      }
    } else {
      console.log('‚ùå Failed to get registration requests:', requestsData.error)
      return
    }

    // Test 5: Login after approval (should work)
    console.log('\n5Ô∏è‚É£ Testing login after approval (should work)...')
    await new Promise(resolve => setTimeout(resolve, 1000)) // Wait a bit
    
    const loginAfterResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: testEmail,
        password: testData.password
      })
    })

    const loginAfterData = await loginAfterResponse.json()
    
    if (loginAfterData.success) {
      console.log('‚úÖ Login successful after approval!')
      console.log(`   User: ${loginAfterData.user.name}`)
      console.log(`   Role: ${loginAfterData.user.role}`)
      console.log(`   Email: ${loginAfterData.user.email}`)
    } else {
      console.log('‚ùå Login failed after approval:', loginAfterData.error)
    }

    // Test 6: Check updated status
    console.log('\n6Ô∏è‚É£ Testing updated registration status...')
    const finalStatusResponse = await fetch(`http://localhost:3000/api/owner/register?email=${encodeURIComponent(testEmail)}`)
    const finalStatusData = await finalStatusResponse.json()
    
    if (finalStatusData.success && finalStatusData.data.hasRegistration) {
      console.log('‚úÖ Final status check works!')
      console.log(`   Status: ${finalStatusData.data.registration.status}`)
      console.log(`   Can Login: ${finalStatusData.data.registration.canLogin}`)
    } else {
      console.log('‚ùå Final status check failed')
    }

    console.log('\nüéâ New Owner Registration Flow Test Completed!')
    console.log('\nüìã Summary:')
    console.log('   ‚úÖ Standalone registration (no login required)')
    console.log('   ‚úÖ Registration status tracking')
    console.log('   ‚úÖ Login blocked before approval')
    console.log('   ‚úÖ Admin approval creates user account')
    console.log('   ‚úÖ Login works after approval')
    console.log('   ‚úÖ Status updated correctly')

  } catch (error) {
    console.error('‚ùå Test error:', error.message)
  }

  // Cleanup
  if (registrationId) {
    console.log('\nüßπ Cleaning up test data...')
    try {
      // Note: In a real scenario, you might want to clean up the test user and registration
      // For now, we'll leave it as demo data
      console.log('‚úÖ Cleanup completed (test data kept as demo)')
    } catch (error) {
      console.log('‚ö†Ô∏è  Cleanup warning:', error.message)
    }
  }
}

// Run test
testNewOwnerRegistrationFlow().catch(console.error)
